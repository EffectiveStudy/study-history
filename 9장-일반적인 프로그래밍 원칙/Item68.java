package org.example;

// 일반적으로 통용되는 명명 규칙을 따르라
public class Item68 {

    // 자바는 명명 규칙이 잘 정의되어 있는편.
    // https://docs.oracle.com/javase/specs/jls/se9/html/jls-6.html#jls-6.1
    // 자바 명명 규칙 명세는 위 링크를 참고!

    // 1. 철자

    // 1-1. 패키지
    // 각 요소를 점(.) 으로 구분하여 계층적인 이름을 지음 ex)com.effective.java
    // - 이때 요소들은 모두 소문자 알파벳 or 숫자로만 구성
    // - 보통은 조직의 도메인 이름을 역순으로 많이 표현
    // - 예외적으로 표준 라이브러리와 선택적 패캐지들은 java / javax로 시작
    // 패지키 이름의 나머지는 해당 패키지를 설명하는 용도로 하나 이상의 요소로 이루어짐
    // - 각 요소는 8자 이하의 단어로 통용되는 약자를 추천 (utilities -> util)
    // - 합성어의 경우 약자로 표현 (awt -> Abstract Window Toolkit)
    // ctgy : 카테고리
    // no num -> 통용되는 약어...
    // number...
    // 컨벤션... ㅂㄷㅂㄷ... 그쵸 내가 곧 사전이다...
    // 기능별로 다른걸 개발..?
    // 너는 로그인 나는 가계부 => 프로젝트 안에서는 맞춰야...
    // 로그인 user 가계부 member.. 패턴.. 빌더 패턴 생성자...... (적재적소...)


    // 1-2. 클래스와 인터페이스
    // 하나 이상의 단어로 구성되고, 각 단어는 대문자로 시작
    // - 널리 통용되는 약어(min, max)를 제외하고는 단어를 줄여쓰지 않도록 함

    // 1-3. 메서드와 필드
    // 첫 글자를 소문자로 쓴다는 점만 빼면 클래스 명명 규칙과 동일
    // 첫 단어가 약자(여러 글자로 된 말의 일부를 줄이거나 생략하여 만든 글자)라면 단어 전체가 소문자로 구성 (예시가?)
    // ㅇ러니라ㅓㄴㅇ라예시 ... aop jwt
    // 상수 필드를 구성하는 단어는 모두 대문자로 작성하고 단어 사이를 밑줄로 구분
    // 지역변수에는 약어를 허용
    // - 약어를 써도 변수가 사용되는 범위가 적어 비교적 쉽게 의미를 유추할 수 있기 때문
    // 타입 매개변수의 이름은 보통 한 문자로 표현

    // 2. 문법

    // 2-1. 클래스
    // 객체 생성이 가능한 클래스의 이름은 보통 단수 명사나 명사구를 사용
    // - Thread, PriorityQueue
    // - 이와 반대로 객체를 생성할 수 없는 클래스에는 복수형 명사를 사용
    // - Arrays, Collections
    // 인터페이스 이름은 클래스와 똑같이 짓거나 able 혹은 ible로 끝나는 형용사로 지음
    // - Runnable, Iterable, Accessible
    // 어노테이션은 활용이 다양하기 때문에 지배적인 규칙 없이 명사, 동사, 전치사, 형용사가 두루 쓰임

    // 2-2. 메서드
    // 어떤 동작을 수행하는 메서드의 이름은 동사구로 지음
    // - append, drawImage
    // boolean 값을 반환하는 메서드라면 보통 is나 간혹 has로 시작하고 명사나 명사구, 혹은 형용사로 기능하는 아무 단어나 구로 끝나도록 지음
    // - isEmpty, hasSiblings
    // - 반환 타입이 boolean이 아니거나 해당 인스턴스 속성을 반환하는 메서드의 이름은 보통 명사, 명사구 혹은 get으로 시작하는 동사구로 지음
    // - size, hashCode, getTime
    // 객체 타입을 바꿔서 다른 타입의 또 다른 객체를 반환하는 인스턴스 메서드의 이름은 보통 toType 형태로 지음
    // - toString, toArray
    // 객체의 내용을 다른 뷰로 보여주는 메서드의 이름은 asType 형태로 지음
    // - asList
    // 정적 팩터리의 이름은 다양하지만
    // from, of, valueOf, instance, getInstance, newInstance, getType, newType을 흔히 사용함

}
